#!/usr/bin/python

# recommendations.py from https://raw.githubusercontent.com/arthur-e/Programming-Collective-Intelligence/master/chapter2/recommendations.py


# -*- coding: utf-8 -*-
from math import sqrt
import numpy as np
from collections import OrderedDict

def sim_distance(prefs, p1, p2):
    '''
    Returns a distance-based similarity score for person1 and person2.
    '''

    # Get the list of shared_items
    si = {}
    for item in prefs[p1]:
        if item in prefs[p2]:
            si[item] = 1
    # If they have no ratings in common, return 0
    if len(si) == 0:
        return 0
    # Add up the squares of all the differences
    sum_of_squares = sum([pow(prefs[p1][item] - prefs[p2][item], 2) for item in
                         prefs[p1] if item in prefs[p2]])
    return 1 / (1 + sum_of_squares)


def sim_pearson(prefs, p1, p2):
    '''
    Returns the Pearson correlation coefficient for p1 and p2.
    '''

    # Get the list of mutually rated items
    si = {}
    for item in prefs[p1]:
        if item in prefs[p2]:
            si[item] = 1
    # If they are no ratings in common, return 0
    if len(si) == 0:
        return 0
    # Sum calculations
    n = len(si)
    # Sums of all the preferences
    sum1 = sum([prefs[p1][it] for it in si])
    sum2 = sum([prefs[p2][it] for it in si])
    # Sums of the squares
    sum1Sq = sum([pow(prefs[p1][it], 2) for it in si])
    sum2Sq = sum([pow(prefs[p2][it], 2) for it in si])
    # Sum of the products
    pSum = sum([prefs[p1][it] * prefs[p2][it] for it in si])
    # Calculate r (Pearson score)
    num = pSum - sum1 * sum2 / n
    den = sqrt((sum1Sq - pow(sum1, 2) / n) * (sum2Sq - pow(sum2, 2) / n))
    if den == 0:
        return 0
    r = num / den
    return r


def topMatches(
    prefs,
    person,
    n=5,
    similarity=sim_pearson,
):
    '''
    Returns the best matches for person from the prefs dictionary. 
    Number of results and similarity function are optional params.
    '''

    scores = [(similarity(prefs, person, other), other) for other in prefs
              if other != person]
    scores.sort()
    scores.reverse()
    return scores[0:n]


def getRecommendations(prefs, person, similarity=sim_pearson):
    '''
    Gets recommendations for a person by using a weighted average
    of every other user's rankings
    '''

    totals = {}
    simSums = {}
    for other in prefs:
    # Don't compare me to myself
        if other == person:
            continue
        sim = similarity(prefs, person, other)
    # Ignore scores of zero or lower
        if sim <= 0:
            continue
    for item in prefs[other]:
        # Only score movies I haven't seen yet
        if item not in prefs[person] or prefs[person][item] == 0:
            # Similarity * Score
            totals.setdefault(item, 0)
            # The final score is calculated by multiplying each item by the
            #   similarity and adding these products together
            totals[item] += prefs[other][item] * sim
            # Sum of similarities
            simSums.setdefault(item, 0)
            simSums[item] += sim
    # Create the normalized list
    rankings = [(total / simSums[item], item) for (item, total) in
                totals.items()]
    # Return the sorted list
    rankings.sort()
    rankings.reverse()
    return rankings


def transformPrefs(prefs):
    '''
    Transform the recommendations into a mapping where persons are described
    with interest scores for a given title e.g. {title: person} instead of
    {person: title}.
    '''

    result = {}
    for person in prefs:
        for item in prefs[person]:
            result.setdefault(item, {})
            # Flip item and person
            result[item][person] = prefs[person][item]
    return result


def calculateSimilarItems(prefs, n=10):
    '''
    Create a dictionary of items showing which other items they are
    most similar to.
    '''

    result = {}
    # Invert the preference matrix to be item-centric
    itemPrefs = transformPrefs(prefs)
    c = 0
    for item in itemPrefs:
        # Status updates for large datasets
        c += 1
        if c % 100 == 0:
            print '%d / %d' % (c, len(itemPrefs))
        # Find the most similar items to this one
        scores = topMatches(itemPrefs, item, n=n, similarity=sim_distance)
        result[item] = scores
    return result


def getRecommendedItems(prefs, itemMatch, user):
    userRatings = prefs[user]
    scores = {}
    totalSim = {}
    # Loop over items rated by this user
    for (item, rating) in userRatings.items():
        # Loop over items similar to this one
        for (similarity, item2) in itemMatch[item]:
            # Ignore if this user has already rated this item
            if item2 in userRatings:
                continue
            # Weighted sum of rating times similarity
            scores.setdefault(item2, 0)
            scores[item2] += similarity * rating
            # Sum of all the similarities
            totalSim.setdefault(item2, 0)
            totalSim[item2] += similarity
    # Divide each total score by total weighting to get an average
    rankings = [(score / totalSim[item], item) for (item, score) in
                scores.items()]
    # Return the rankings from highest to lowest
    rankings.sort()
    rankings.reverse()
    return rankings

movies = {}

def loadMovieLens():
  # Get movie titles
    
    for line in open('u.item'):
        (id, title) = line.split('|')[0:2]
        movies[id] = title
  # Load data
    prefs = {}
    for line in open('u.data'):
        (user, movieid, rating, ts) = line.split('\t')
        prefs.setdefault(user, {})
        prefs[user][movies[movieid]] = float(rating)
  # Load user data
    userData = {}
    for line in open('u.user'):
        (user, age, gender) = line.split('|')[0:3]
        userData.setdefault(user, {})
        userData[user]["Ratings"] = prefs[user]
        userData[user]["Age"] = age	
        userData[user]["Gender"] =  gender
    return userData

if __name__ == '__main__':

    
  # get a list of all ratings 
    prefs = loadMovieLens()
    movieRatings = {}
    movieRatingsWomen = {}
    movieRatingsWomenGT40 = {}
    movieRatingsWomenLT40 = {}
    movieRatingsMen = {}
    movieRatingsMenGT40 = {}
    movieRatingsMenLT40 = {}


    for usr, usrData in prefs.iteritems():
        for movie, movieRating in usrData["Ratings"].iteritems():
            movieRatings.setdefault(movie, []).append(int(movieRating))
            if (usrData["Gender"] == 'F'):
                movieRatingsWomen.setdefault(movie, []).append(int(movieRating))
                if (int(usrData["Age"]) < 40):
                    movieRatingsWomenLT40.setdefault(movie, []).append(int(movieRating))
                elif (int(usrData["Age"]) > 40):
                    movieRatingsWomenGT40.setdefault(movie, []).append(int(movieRating))
                    
            else:
                movieRatingsMen.setdefault(movie, []).append(int(movieRating))
                if (int(usrData["Age"]) < 40):
                    movieRatingsMenLT40.setdefault(movie, []).append(int(movieRating))
                elif (int(usrData["Age"]) > 40):

                    movieRatingsMenGT40.setdefault(movie, []).append(int(movieRating))



  #Question 1.  What 5 movies have the highest average ratings? Show the movies and their ratings sorted by their average ratings.

    
    avgRatings = {}

    for movie, ratings in movieRatings.iteritems():
        avgRatings[movie] = np.mean(ratings)

    avgRatingsDescending = OrderedDict(sorted(avgRatings.items(), key = lambda k: k[1], reverse = True))

    ctr = 0
    prev = 0
    with open("q1", "w+") as f:
      for x in avgRatingsDescending.items():
       if (ctr < 5 or prev == x[1]):
           f.write(str(x[1]) + ' & ' + str(x[0]) + '\\\\ \n' )
           prev = x[1]
           ctr = ctr + 1
       else:
           break

  #Question 2.  What 5 movies received the most ratings? Show the movies and the number of ratings sorted by number of ratings.

    numRatings = {}

    for movie, ratings in movieRatings.iteritems():
        numRatings[movie] = len(ratings)


    numRatingsDescending = OrderedDict(sorted(numRatings.items(), key = lambda k: k[1], reverse = True))

    ctr = 0
    prev = 0
    with open("q2", "w+") as f:
        for x in numRatingsDescending.items():
            if (ctr < 5 or prev == x[1]):
                f.write(str(x[1]) + " & " + str(x[0]) + "\\\\ \n")
                ctr = ctr+1
                prev = x[1]
            else:
                break

  #Question 3.  What 5 movies were rated the highest on average by women? Show the movies and their ratings sorted by ratings.

    avgRatings = {}

    for movie, ratings in movieRatingsWomen.iteritems():
        avgRatings[movie] = np.mean(ratings)

    avgRatingsDescending = OrderedDict(sorted(avgRatings.items(), key = lambda k: k[1], reverse = True))

    ctr = 0
    prev = 0
    with open("q3", "w+") as f:
      for x in avgRatingsDescending.items():
       if (ctr < 5 or prev == x[1]):
           f.write(str(x[1]) + ' & ' + str(x[0]) + '\\\\ \n' )
           prev = x[1]
           ctr = ctr + 1
       else:
           break

  #Question 4.  What 5 movies were rated the highest on average by men? Show the movies and their ratings sorted by ratings.

    avgRatings = {}

    for movie, ratings in movieRatingsMen.iteritems():
        avgRatings[movie] = np.mean(ratings)

    avgRatingsDescending = OrderedDict(sorted(avgRatings.items(), key = lambda k: k[1], reverse = True))

    ctr = 0
    prev = 0
    with open("q4", "w+") as f:
      for x in avgRatingsDescending.items():
       if (ctr < 5 or prev == x[1]):
           f.write(str(x[1]) + ' & ' + str(x[0]) + '\\\\ \n' )
           prev = x[1]
           ctr = ctr + 1
       else:
           break

  #Question 5.  What movie received ratings most like Top Gun? Which movie received ratings that were least like Top Gun (negative correlation)?


  #Question 6.  Which 5 raters rated the most films? Show the raters' IDs and the number of films each rated.

    numUsrRatings = {}

    for usr, usrData in prefs.iteritems():
        numUsrRatings[usr] = len(usrData["Ratings"])


    numRatingsDescending = OrderedDict(sorted(numUsrRatings.items(), key = lambda k: k[1], reverse = True))

    ctr = 0
    prev = 0
    with open("q6", "w+") as f:
        for x in numRatingsDescending.items():
            if (ctr < 5 or prev == x[1]):
                f.write(str(x[1]) + " & " + str(x[0]) + "\\\\ \n")
                ctr = ctr+1
                prev = x[1]
            else:
                break


  #Question 7.  Which 5 raters most agreed with each other? Show the raters' IDs and Pearson's r, sorted by r.

  #Question 8.  Which 5 raters most disagreed with each other (negative correlation)? Show the raters' IDs and Pearson's r, sorted by r.

  #Question 9.  What movie was rated highest on average by men over 40? By men under 40?

    avgRatingsGT40 = {}
    avgRatingsLT40 = {}

    for movie, ratings in movieRatingsMenGT40.iteritems():
        avgRatingsGT40[movie] = np.mean(ratings)

    avgRatingsDescendingGT40 = OrderedDict(sorted(avgRatingsGT40.items(), key = lambda k: k[1], reverse = True))

    for movie, ratings in movieRatingsMenLT40.iteritems():
        avgRatingsLT40[movie] = np.mean(ratings)

    avgRatingsDescendingLT40 = OrderedDict(sorted(avgRatingsLT40.items(), key = lambda k: k[1], reverse = True))



    with open("q9", "w+") as f:
        prev = -1
        f.write("Older than 40:\n")
        for x in avgRatingsDescendingGT40.items():
            if (prev == -1 or prev == x[1]):
                f.write(str(x[1]) + " & " + str(x[0]) + "\\\\ \n")
                prev = x[1]
            else:
                break

        prev = -1
        f.write("Under 40:\n")
        for x in avgRatingsDescendingLT40.items():
            if (prev == -1 or prev == x[1]):
                f.write(str(x[1]) + " & " + str(x[0]) + "\\\\ \n")
                prev = x[1]
            else:
                break

  #Question 10. What movie was rated highest on average by women over 40? By women under 40?

    avgRatingsGT40 = {}
    avgRatingsLT40 = {}

    for movie, ratings in movieRatingsWomenGT40.iteritems():
        avgRatingsGT40[movie] = np.mean(ratings)

    avgRatingsDescendingGT40 = OrderedDict(sorted(avgRatingsGT40.items(), key = lambda k: k[1], reverse = True))

    for movie, ratings in movieRatingsWomenLT40.iteritems():
        avgRatingsLT40[movie] = np.mean(ratings)

    avgRatingsDescendingLT40 = OrderedDict(sorted(avgRatingsLT40.items(), key = lambda k: k[1], reverse = True))



    with open("q10", "w+") as f:
        prev = -1
        f.write("Older than 40:\n")
        for x in avgRatingsDescendingGT40.items():
            if (prev == -1 or prev == x[1]):
                f.write(str(x[1]) + " & " + str(x[0]) + "\\\\ \n")
                prev = x[1]
            else:
                break

        prev = -1
        f.write("Under 40:\n")
        for x in avgRatingsDescendingLT40.items():
            if (prev == -1 or prev == x[1]):
                f.write(str(x[1]) + " & " + str(x[0]) + "\\\\ \n")
                prev = x[1]
            else:
                break







